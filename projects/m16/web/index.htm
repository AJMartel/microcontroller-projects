<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <script type="text/javascript"
            src="http://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/ext-modern-all-debug.js"></script>

    <link rel="stylesheet" type="text/css"
          href="http://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/modern/theme-material/resources/theme-material-all-debug.css">
    <script type="text/javascript"
            src="http://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/modern/theme-material/theme-material-debug.js"></script>

    <link rel="stylesheet" type="text/css"
          href="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/packages/charts/classic/classic/resources/charts-all-debug.css">
    <script type="text/javascript"
            src="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/packages/charts/modern/charts-debug.js"></script>

    <script type="text/javascript">
    hex = function(palette, color) {
      if (palette == 0) {
        return color ? '#fff' : '#000';
      } else if (palette == 1) {
        var l = color.toString(16)
        return "#"+l+l+l;
      } else if (palette == 2) {
        // 4-bit IRGB 16 colour
        var n = (color >> 3) & 0x1;
        var r = (color >> 2) & 0x1;
        var g = (color >> 1) & 0x1;
        var b = (color >> 0) & 0x1;

        if (r & g & !b & !n) {
          return "#a52";
        } else {
          r*=0x8;
          g*=0x8;
          b*=0x8;
          n*=0x5;
          return "#" + (r+n+2).toString(16) + (g+n+2).toString(16) + (b+n+2).toString(16);
        }
      } else if (palette == 3) {
        // 8-bit IIRRGGBB 256 color
        var i = ((color >> 6) & 0x3) * 1;
        var r = ((color >> 4) & 0x3) * 4;
        var g = ((color >> 2) & 0x3) * 4;
        var b = ((color >> 0) & 0x3) * 4;
        return "#" + (r+i).toString(16) + (g+i).toString(16) + (b+i).toString(16)
      } else if (palette == 4) {
        // 8-bit RRRGGGBB 256 color
        var r = ((color >> 5) & 0x7) * 2 + 1;
        var g = ((color >> 2) & 0x7) * 2 + 1;
        var b = ((color >> 0) & 0x3) * 4 + 3;
        return "#" + r.toString(16) + g.toString(16) + b.toString(16);
      } else if (palette == 5) {
        // 12-bit RGB 1024 color
        var r = (color >> 8) & 0xf;
        var g = (color >> 4) & 0xf;
        var b = (color >> 0) & 0xf;
        return "#" + r.toString(16) + g.toString(16) + b.toString(16);
      } else {
        return "#000";
      }
    };

    Ext.define('MyApp.model.Pixel', {
      extend: 'Ext.data.Model',
      fields: [
        {name: 'color', type: 'int', defaultValue: 0}
      ],
      getColor: function() {
        return this.get('color');
      },
      setColor: function(value) {
        this.set('color', value);
      },
    });
    Ext.define('MyApp.model.Frame', {
      extend: 'Ext.data.Model',
      fields: [
        {name: 'delay', type: 'int', defaultValue: 0}
      ],
      hasMany: [
        {name: 'pixels', model:'MyApp.model.Pixel'}
      ],
    });
    Ext.define('MyApp.model.Icon', {
      // each icon consists of a 3 byte header
      // then for each frame consists of n bytes data + 1 byte footer
      // header = [width 7:0][height 7:0][config 7:0]
      // config = [unused 7:3][palette 2:0]
      // footer = [unused 7][more 6][delay 5:0] (50 - 3150 ms; 0 = don't animate)
      // palette 0 = 1 bit A1 (color value must be supplied externally)
      // palette 1 = 4 bit L4 (16-gray)
      // palette 2 = 4 bit I1 R1 G1 B1 (16-color i.e. CGA)
      // palette 3 = 8 bit I2 R2 G2 B2 (256-color i.e. SAM Coup√© ++)
      // palette 5 = 8 bit R3 G3 B2 (256-color)
      // palette 5 = 12 bit R4 G4 B4 (4096-color)
      // palette 6 = 16 bit R5 G6 B5 (65,536-color)
      // palette 7 = 24 bit R8 G8 B8 (16,777,216-color)

      extend: 'Ext.data.Model',
      fields: [
          {name: 'width', type: 'int'},
          {name: 'height',  type: 'int'},
          {name: 'palette', type: 'int'},
          {name: 'color', type: 'int'},   // transient: the current color
          {name: 'frame', type: 'int'}    // transient: the current frame
      ],
      hasMany: [
        {name: 'frames', model: 'MyApp.model.Frame'}
      ],
      getPalette: function() {
        return this.get('palette');
      },
      getFrame: function() {
        return this.get('frame');
      },
      setFrame: function(frame) {
        this.set('frame',frame);
      },
      getColor: function() {
        return this.get('color');
      },
      setColor: function(value) {
        this.set('color', value);
      },
      setAt: function(index) {
        var frame = this.frames().data.items[this.get('frame')];
        var pixel = frame.pixels().data.items[index];
        pixel.setColor(this.getColor());
      },

      read: function(buffer) {
        var width = buffer[0];
        var height = buffer[1];
        var config = buffer[2];
        var palette = config & 0x7;

        set('width', width);
        set('height', height);
        set('palette', palette);

        switch (palette) {
          case 0: bpp = 1; bytes = (width * height) / 8; bits = (width * height) & 0x7;
          case 1: bpp = 4; bytes = (width * height) / 2; bits = ((width * height) & 0x1) * 4
          case 2: bpp = 4; bytes = (width * height) / 2; bits = ((width * height) & 0x1) * 4
          case 3: bpp = 8; bytes = width * height; bits = 0;
          case 4: bpp = 8; bytes = width * height; bits = 0;
          // case 5: bpp = 16; bytes = (width * height) << 1; bits = 0;
          // case 6: bpp = 24; bytes = (width * height) * 3; bits = 0;
          // case 7: bpp = 32; bytes = (width * height) << 2; bits = 0;
          default: bpp = 0; bytes = 0; bits = 0;
        }

        var frame = 0
        var more = true
        var byte = 3 // position in the buffer

        frames().removeAll()
        while (more) {
          frames().add({})
          frame++

          var pixels = frames.get(frame).pixels()
          var bit = bits == 0 ? 7 : bits - 1; // current bit in the current byte

          for (var iy = 0; iy < height; iy++) {
            for (var ix = 0; ix < width; ix++) {
              pixels.add({})
              var i = (iy*width)+ix;
              this.read_(i, byte, bit, buffer);

              switch(bpp) {
                case 1: bit--;
                case 4: bit-=4;
                case 8: byte+=1;
                case 12: byte+=1; bit-=4;
                case 16: byte+=2;
                case 24: byte+=3;
                case 32: byte+=4;
              }
              if (bit < 0) {
                bit = 7; i++;
              }
            }
          }

          var footer = buffer[byte++]
          frames.get(frame).set('delay', (footer & 0x1f) * 50)
          more = (footer >> 6) & 0x01 ? true: false
        }
      },

      read_: function(index, byte, bit, buffer) {
        switch (get('palette')) {
          case 0: setColor(buffer[byte] & bv(bit--) > 0 ? 1 : 0); break;
          case 1: setColor(bit == 7 ? (buffer(byte) >> 4) : (buffer(byte) && 0x0f)); break;
          case 2: setColor(bit == 7 ? (buffer(byte) >> 4) : (buffer(byte) && 0x0f)); break;
          case 3: setColor(buffer[byte]); break;
          case 4: setColor(buffer[byte]); break;
          case 5: setColor((buffer[byte] << 8) | (buffer[byte+1] << 4) | (buffer[byte+2] << 0)); break;
        }
        setAt(index);
      }
    });

    Ext.define('MyApp.controller.IconController', {
      extend: 'Ext.app.Controller',
      models: ['Icon'],
      stores: ['Icon','Frames'],

      // calculates the 3D distance between two colors
      distance: function(a, b) {
        Pr = .2126;
        Pg = .7152;
        Pb = .0722;

        Dr = a[0] - b[0];
        Dg = a[1] - b[1];
        Db = a[2] - b[2];

        return sqrt((Pr * Dr * Dr) + (Pg * Dg * Dg) + (Pb * Db * Db));
      },

      // finds the nearest color from a list of colors in a palette
      nearest: function(color, palette) {
        return palette.reduce(function(a, c) {
          return min(a, distance(c, color));
        });
      },

      bv: function(bit) {
        (1 << (bit));
      },
    })

    Ext.define('MyApp.view.ToolsController', {
      extend: 'Ext.app.ViewController',
      alias: 'controller.tools',

      control: {
        'button#new': {
          tap: 'onNewTap'
        },
        'draw': {
          change: 'onColorChange'
        }
      },

      onColorChange: function(value) {
        icon.setColor(value);
        var text = this.lookupReference('hex');
        text.setValue(hex(icon.getPalette(), value));
      },

      onNewTap: function() {
        var h = parseInt(this.lookupReference('height').getValue());
        var w = parseInt(this.lookupReference('width').getValue());

        var p = this.lookupReference('selectpalette');
        this.lookupReference('palette').setActiveItem(p.getValue());

        // build an initial model
        icon = Ext.create('MyApp.model.Icon', {
            width: w,
            height: h,
            palette: p.getValue(),
            frame: 0
        });
        var frame = icon.frames().add({ delay: 0 })[0];
        for (i = 0; i < h*w; i++) {
            frame.pixels().add({});
        }

        var c = this.lookupReference('canvas');
        c.paint(icon);
      }

    });

    Ext.application({
        name: 'icon editor',

        launch: function() {
          Ext.Viewport.setController('tools');
          Ext.Viewport.add([
            {
              xtype: 'toolbar',
              itemId: 'toolbar',
              docked: 'top',
              title: 'Icon Editor',
              items: [{
                xtype: 'button',
                iconCls: 'x-fa fa-hdd-o'
              },{
                xtype: 'spacer', width: 50
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-step-backward'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-play'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-step-forward'
              },{
                xtype: 'spacer'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-arrow-up'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-arrow-down'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-plus'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-minus'
              }]
            },{
              xtype: 'panel',
              layout: 'hbox',
              padding: 0,
              items: [{
                padding: 0,
                border: true,
                xtype: 'panel',
                layout: 'vbox',
                width: 240,
                items: [{
                  xtype: 'formpanel',
                  items: [{
                    xtype: 'fieldset',
                    title: 'Image',
                    items: [{
                      xtype: 'textfield',
                      reference: 'width',
                      label: 'Width',
                      value: '16',
                      required: true,
                    },{
                      xtype: 'textfield',
                      reference: 'height',
                      label: 'Height',
                      value: '16',
                      required: true,
                    },{
                      xtype: 'selectfield',
                      reference: 'selectpalette',
                      required: true,
                      label: 'Palette',
                      value: 3,
                      options: [{
                        text: '1 bpp',
                        value: 0
                      },{
                        text: '4 bpp 16 gray',
                        value: 1
                      },{
                        text: '4 bpp 16 colour',
                        value: 2
                      },{
                        text: '8 bpp 256 colour (IRGB)',
                        value: 3
                      },{
                        text: '8 bpp 256 colour (3-3-2)',
                        value: 4
                      },{
                        text: '12 bpp 4096 colour',
                        value: 5
                      }],
                    },{
                      xtype: 'button',
                      itemId: 'new',
                      text: 'New Icon'
                    }]
                  },{
                    xtype: 'fieldset',
                    title: 'Frame',
                    items: [{
                      xtype: 'sliderfield',
                      reference: 'delay',
                      label: 'Delay',
                      value: 0,
                      minValue: 0,
                      maxValue: 63
                    }]
                  },{
                    xtype: 'fieldset',
                    title: 'Pixel',
                    items: [{
                      xtype: 'textfield',
                      itemId: 'hex',
                      reference: 'hex',
                      label: 'Color',
                      value: 'f00',
                      required: true
                    },{
                      xtype: 'panel',
                      layout: 'card',
                      itemId: 'palette',
                      reference: 'palette',
                      label: 'Colour',
                      height: 200,
                      activeItem: 3,
                      items: [
                        { xtype: 'palette0' },
                        { xtype: 'palette1' },
                        { xtype: 'palette2' },
                        { xtype: 'palette3' },
                        { xtype: 'palette4' },
                        { xtype: 'palette5' }
                      ]
                    }]
                  }]
                }]
            },{
              xtype: 'panel',
              flex: 1,
              border: true,
              items: [{
                xtype: 'draw',
                plugins: ['spriteevents'],
                color: '#ccc',
                reference: 'canvas',
                centered: true,
                border: true,
                width: 512,
                height: 512,
                fillStyle: '#000',
                color: 0,
                listeners: {
                  spriteclick: function(item, event) {
                    var sprite = item && item.sprite;
                    if (sprite) {
                      sprite.setAttributes({fillStyle: hex(icon.getPalette(),icon.getColor()), value: icon.getColor()});
                      sprite.getSurface().renderFrame();
                      this.fireEvent('draw', sprite.index)
                    }
                  },
                  spritemousedown: function(item, event) {
                    var sprite = item && item.sprite;
                    if (sprite) {
                      this.mousedown = true;
                    }
                  },
                  spritemouseup: function(item, event) {
                    var sprite = item && item.sprite;
                    if (sprite) {
                      this.mousedown = false;
                    }
                  },
                  spritemouseover: function(item, event) {
                    var sprite = item && item.sprite;
                    if (sprite && this.mousedown) {
                      sprite.setAttributes({fillStyle: hex(icon.getPalette(),icon.getColor()), value: icon.getColor()});
                      sprite.getSurface().renderFrame();
                      this.fireEvent('draw', sprite.index)
                    }
                  }
                },
                paint: function(model) {
                  this.getSurface().removeAll();
                  var sprites = [];
                  var h = model.data.height;
                  var w = model.data.width;
                  var p = model.data.palette;
                  var s = 512 / Math.max(h,w);
                  var frame = model.frames().data.items[model.data.frame];
                  var pixels = frame.pixels().data.items;
                  for (var x = 0; x < w; x++) {
                    for (var y = 0; y < h; y++) {
                      var i = (y*w)+x;
                      var v = pixels[i].getColor();
                      sprites.push({ type: 'rect', x: x*s, y: y*s, index: i, value: v, width: s, height:s, fillStyle: hex(p,v), strokeStyle: '#ccc' })
                    }
                  }
                  this.getSurface().add(sprites);
                  this.getSurface().renderFrame();
                }
              }]
            },{
              border: true,
              xtype: 'panel',
              layout: 'fit',
              width: 100,
              items: [{
                xtype: 'list',
                itemTpl: '{title}',
                data: []
              }]
            }
          ]
        }]);
      }
    });

    // palette 0 = 1 bit A1 (color value must be supplied externally)
    Ext.define('MyApp.view.Palette0', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette0',
      plugins: ['spriteevents'],
      color: 0,
      draw: function() {
        var color = this.color;
        var sprites = [];
        sprites.push({ value: 0, type: 'rect', x: 0, y: 36, width: 96, height: 24, fillStyle: '#000', strokeStyle: color == 0 ? '#ccc' : '#333' });
        sprites.push({ value: 1, type: 'rect', x: 96, y: 36, width: 96, height: 24, fillStyle: '#fff', strokeStyle: color == 1 ? '#ccc' : '#333' });
        this.setSprites(sprites);
        this.getSurface().renderFrame();
      },
      initialize: function() {
        this.callParent();
        this.draw();
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.color = sprite.value;
            this.draw();
            this.fireEvent('change', sprite.value)
          }
        }
      }
    });

    // palette 1 = 4 bit L4 (4-bit framebuffer, 16 level of gray)
    Ext.define('MyApp.view.Palette1', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette1',
      plugins: ['spriteevents'],
      color: 0,
      draw: function() {
        var sprites = []
        var y = 0;
        var color = this.color;

        for (var j = 0; j < 2; j++) {
          for (var i = 0; i < 8; i++) {
            var c = j * 8 + i;
            sprites.push({ value: c, type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: hex(1, c), strokeStyle: c == color ? '#ccc' : '#333' });
          }
          y+=24;
        }
        this.setSprites(sprites);
        this.getSurface().renderFrame();
      },
      initialize: function() {
        this.callParent();
        this.draw();
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.color = sprite.value;
            this.draw();
            this.fireEvent('change', sprite.value)
          }
        }
      }
    });

    // palette 2 = 4 bit R1 G1 B1 I1 (8-bit framebuffer RGBI, 16-color)
    // i.e. GCA
    Ext.define('MyApp.view.Palette2', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette2',
      plugins: ['spriteevents'],
      color: 0,
      draw: function() {
        var sprites = []
        var y = 0
        var color = this.color;

        // colors
        for (var i = 0; i < 2; i++) {
          for (var x = 0; x < 8; x++) {
            var c = i * 8 + x;
            sprites.push({ value: c, type: 'rect', x: x*24, y: y, width: 24, height: 24, fillStyle: hex(2,c), strokeStyle: c == color ? '#ccc' : '#333' });
          }
          y+=24;
        }
        this.setSprites(sprites);
        this.getSurface().renderFrame();
      },
      initialize: function() {
        this.callParent();
        this.draw();
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.color = sprite.value;
            this.draw();
            this.fireEvent('change', sprite.value)
          }
        }
      }
    });

    // palette 3 = 8 bit R2 G2 B2 I2 (8-bit framebuffer)
    // i.e. SAM Coup√©
    Ext.define('MyApp.view.Palette3', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette3',
      plugins: ['spriteevents'],
      color: 0,
      draw: function() {
        var f = function(i,r,g,b) {
          return (i << 6) | (r << 4) | (g << 2) | (b << 0);
        };
        var sprites = []
        var color = this.color;
        var n = (color >> 6) & 0x3;
        var r = (color >> 4) & 0x3;
        var g = (color >> 2) & 0x3;
        var b = (color >> 0) & 0x3;
        var y = 0;
        for (var i = 0; i < 4; i++) {
          var c = f(i,r,g,b);
          sprites.push({ value: c, type: 'rect', x: i*48, y: y, width: 48, height: 24, fillStyle: hex(3,c), strokeStyle: i == n ? '#ccc' : '#333' });
        }
        y+=24;
        for (var i = 0; i < 4; i++) {
          var c = f(n,i,g,b);
          sprites.push({ value: c, type: 'rect', x: i*48, y: y, width: 48, height: 24, fillStyle: hex(3,c), strokeStyle: i == r ? '#ccc' : '#333' });
        }
        y+=24;
        for (var i = 0; i < 4; i++) {
          var c = f(n,r,i,b);
          sprites.push({ value: c, type: 'rect', x: i*48, y: y, width: 48, height: 24, fillStyle: hex(3,c), strokeStyle: i == g ? '#ccc' : '#333' });
        }
        y+=24;
        for (var i = 0; i < 4; i++) {
          var c = f(n,r,g,i);
          sprites.push({ value: c, type: 'rect', x: i*48, y: y, width: 48, height: 24, fillStyle: hex(3,c), strokeStyle: i == b ? '#ccc' : '#333' });
        }
        this.setSprites(sprites);
        this.getSurface().renderFrame();
      },
      initialize: function() {
        this.callParent();
        this.draw();
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.color = sprite.value;
            this.draw();
            this.fireEvent('change', sprite.value);
          }
        }
      }
    });

    // palette 4 = 8 bit 3:3:2
    Ext.define('MyApp.view.Palette4', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette4',
      plugins: ['spriteevents'],
      rgb: [0,0,0],
      draw: function() {
        var f = function(r,g,b) {
          return (r << 5) | (g << 2) | (b << 0);
        };
        var sprites = [];
        var color = this.color;
        var r = (color >> 5) & 0x7;
        var g = (color >> 2) & 0x7;
        var b = (color >> 0) & 0x3;
        var y = 0;
        for (var i = 0; i < 8; i++) {
          var c = f(i,g,b);
          sprites.push({ value: c, type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: hex(4,c), strokeStyle: i == r ? '#ccc' : '#333' })
        }
        y+=24;
        for (var i = 0; i < 8; i++) {
          var c = f(r,i,b);
          sprites.push({ value: c, type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: hex(4,c), strokeStyle: i == g ? '#ccc' : '#333' })
        }
        y+=24;
        for (var i = 0; i < 4; i++) {
          var c = f(r,g,i);
          sprites.push({ value: c, type: 'rect', x: i*48, y: y, width: 48, height: 24, fillStyle: hex(4,c), strokeStyle: i == b ? '#ccc' : '#333' })
        }
        this.setSprites(sprites);
        this.getSurface().renderFrame();
      },
      initialize: function() {
        this.callParent();
        this.draw();
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.color = sprite.value;
            this.draw();
            this.fireEvent('change', sprite.value)
          }
        }
      }
    });

    // palette 5 = 12 bit 4:4:4
    Ext.define('MyApp.view.Palette5', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette5',
      plugins: ['spriteevents'],
      color: 0,
      draw: function() {
        var f = function(r,g,b) {
          return (r << 8) | (g << 4) | (b << 0);
        }
        var sprites = [];
        var color = this.color;
        var r = (color >> 8) & 0xf;
        var g = (color >> 4) & 0xf;
        var b = (color >> 0) & 0xf;
        var y = 0;
        // colors
        for (var i = 0; i < 16; i++) {
          var c = f(i,g,b);
          sprites.push({ value: c, type: 'rect', x: i*12, y: y, width: 12, height: 24, fillStyle: hex(5,c), strokeStyle: i == r ? '#ccc' : '#333' })
        }
        y+=24;
        for (var i = 0; i < 16; i++) {
          var c = f(r,i,b);
          sprites.push({ value: c, type: 'rect', x: i*12, y: y, width: 12, height: 24, fillStyle: hex(5,c), strokeStyle: i == g ? '#ccc' : '#333' })
        }
        y+=24;
        for (var i = 0; i < 16; i++) {
          var c = f(r,g,i);
          sprites.push({ value: c, type: 'rect', x: i*12, y: y, width: 12, height: 24, fillStyle: hex(5,c), strokeStyle: i == b ? '#ccc' : '#333' })
        }
        this.setSprites(sprites);
        this.getSurface().renderFrame();
      },
      initialize: function() {
        this.callParent();
        this.draw();
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.color = sprite.value;
            this.draw();
            this.fireEvent('change', sprite.value)
          }
        }
      }
    });





    </script>
</head>
<body>
</body>
</html>
