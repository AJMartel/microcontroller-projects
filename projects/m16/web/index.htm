<!DOCTYPE html><html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/ext-modern-all-debug.js"></script>

    <link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/modern/theme-material/resources/theme-material-all-debug.css">
    <script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/modern/theme-material/theme-material-debug.js"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/packages/charts/classic/classic/resources/charts-all-debug.css">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/extjs/6.2.0/packages/charts/modern/charts-debug.js"></script>

    <script type="text/javascript">
    Ext.define('MyApp.model.Pixel', {
      extend: 'Ext.data.Model',
      fields: [
        {name: 'a', type: 'int', defaultValue: 0},
        {name: 'r', type: 'int', defaultValue: 0},
        {name: 'g', type: 'int', defaultValue: 0},
        {name: 'b', type: 'int', defaultValue: 0}
      ],
      color: function(r,g,b,a) {
        set('a', a || 0xff)
        set('r', r)
        set('g', g)
        set('b', b)
      }
    });
    Ext.define('MyApp.model.Frame', {
      extend: 'Ext.data.Model',
      fields: [
        {name: 'delay', type: 'int', defaultValue: 0}
      ],
      hasMany: [
        {model:'MyApp.model.Pixel', name: 'pixels'}
      ],
    });
    Ext.define('MyApp.model.Icon', {
      // each icon consists of a 3 byte header
      // then for each frame consists of n bytes data + 1 byte footer
      // header = [width 7:0][height 7:0][config 7:0]
      // config = [unused 7:3][palette 2:0]
      // footer = [unused 7][more 6][delay 5:0] (50 - 3150 ms; 0 = don't animate)
      // palette 0 = 1 bit A1 (color value must be supplied externally)
      // palette 1 = 4 bit L4 (4-bit framebuffer, 16-gray)
      // palette 2 = 4 bit R1 G1 B1 I1 (i.e. CGA)
      // palette 3 = 8 bit R2 G2 B2 I1 A1 (128-color i.e. SAM Coup√©)
      // palette 5 = 8 bit R3 G3 B2 (256-color)
      // palette 5 = 12 bit R4 G4 B4 (4096-color)
      // palette 6 = 16 bit R5 G6 B5 (65,536-color)
      // palette 7 = 24 bit R8 G8 B8 (16,777,216-color)

      extend: 'Ext.data.Model',
      fields: [
          {name: 'width', type: 'int'},
          {name: 'height',  type: 'int'},
          {name: 'palette', type: 'int'},
          {name: 'a', type: 'int'},
          {name: 'r', type: 'int'},
          {name: 'g', type: 'int'},
          {name: 'b', type: 'int'},
          {name: 'frame', type: 'int'}
      ],
      hasMany: [
        {model:'MyApp.model.Frame', name: 'frames'}
      ],
      setColor: function(r,g,b,a) {
        set('a', a || 0xff)
        set('r', r)
        set('g', g)
        set('b', b)
      },
      setAt: function(x, y) {
        var frame = frames().get(frame())
        var pixel = frame.pixels().get((y * height()) + x)
        pixel.color(r(),g(),b(),a())
      },

      read: function(buffer) {
        var width = buffer[0]
        var height = buffer[1]
        var config = buffer[2]
        var palette = config & 0x7

        set('width', width)
        set('height', height)
        set('palette', palette)

        switch (palette) {
          case 0: bpp = 1; bytes = (width * height) / 8; bits = (width * height) & 0x7;
          case 1: bpp = 4; bytes = (width * height) / 2; bits = ((width * height) & 0x1) * 4
          case 2: bpp = 4; bytes = (width * height) / 2; bits = ((width * height) & 0x1) * 4
          case 3: bpp = 8; bytes = width * height; bits = 0;
          case 4: bpp = 8; bytes = width * height; bits = 0;
          // case 5: bpp = 16; bytes = (width * height) << 1; bits = 0;
          // case 6: bpp = 24; bytes = (width * height) * 3; bits = 0;
          // case 7: bpp = 32; bytes = (width * height) << 2; bits = 0;
          default: bpp = 0; bytes = 0; bits = 0;
        }

        var frame = 0
        var more = true
        var byte = 3 // position in the buffer

        frames().removeAll()
        while (more) {
          frames().add({})
          frame++

          var pixels = frames.get(frame).pixels()
          var bit = bits == 0 ? 7 : bits - 1; // current bit in the current byte

          for (var iy = 0; iy < height; iy++) {
            for (var ix = 0; ix < width; ix++) {
              pixels.add({})
              read_(this, ix, iy, byte)

              switch(bpp) {
                case 1: bit--;
                case 4: bit-=4;
                case 8: byte+=1;
                case 12: byte+=1; bit-=4;
                case 16: byte+=2;
                case 24: byte+=3;
                case 32: byte+=4;
              }
              if (bit < 0) {
                bit = 7; i++;
              }
            }
          }

          var footer = buffer[byte++]
          frames.get(frame).set('delay', (footer & 0x1f) * 50)
          more = (footer >> 6) & 0x01 ? true: false
        }
      },

      read_: function(icon, x, y, byte, bit, buffer) {
        switch (get('palette')) {
          case 0: read0(icon, byte, bit, buffer); break;
          case 1: read1(icon, byte, bit, buffer); break;
          case 2: read2(icon, byte, bit, buffer); break;
          case 3: read3(icon, byte, buffer); break;
        }
        setAt(x,y)
      },

      read0: function(icon, byte, bit, buffer) {
        if (buffer[byte] & bv(bit--) > 0) {
          setColor(0xff, 0xff, 0xff, 0xff)
        } else {
          setColor(0x00, 0x00, 0x00, 0x00)
        }
      },

      read1: function(icon, byte, bit, buffer) {
        // 4-bit LLLL 16 grays
        var v = buffer[byte]
        var l3 = (v & bv(bit--)) ? 8 : 0;
        var l2 = (v & bv(bit--)) ? 4 : 0;
        var l1 = (v & bv(bit--)) ? 2 : 0;
        var l0 = (v & bv(bit--)) ? 1 : 0;
        var v = (l3 | l2 | l1 | l0)
        var l = v * 0x11;

        setColor(l, l, l);
      },

      read2: function(icon, byte, bit, buffer) {
        // 4-bit RGBI 16 colour
        // L = 00, AA
        // H = 55, FF
        var v = buffer(byte)
        var r = (v & bv(bit--)) * 0x55;
        var g = (v & bv(bit--)) * 0x55;
        var b = (v & bv(bit--)) * 0x55;
        var i = (v & bv(bit--)) * 0x55;
        var v = bit == 7 ? (buffer(byte) >> 4) : (buffer(byte) && 0x0f)

        if (r & g & !b & !i) {
          // use an orange/brown instead of a dark yellow (just like CGA)
          setColor(0xaa, 0x55, 0x00)
        } else {
          setColor((r+i), (g+i), (b+i))
        }
      },

      read3: function(icon, byte, buffer) {
        // 8-bit RRGGBBIA 128 colour
        // L = 0x11, 0x55, 0x99, 0xdd
        // H = 0x33, 0x77, 0xbb, 0xff
        var v = buffer[byte]
        var a = (v & 0x1) * 0xff;
        var i = ((v >> 1) & 0x1) << 2;
        var r = v >> 6;
        r = ((r | i) << 1) | 0x1;		// add intensity, add 1
        r = (r << 4) | r;
        var g = (v >> 4) & 0x3;
        g = ((g | i) << 1) | 0x1;
        g = (g << 4) | g;
        var b = (v >> 4) & 0x3;
        b = ((b | i) << 1) | 0x1;
        b = (b << 4) | b;
        setColor(r, g, b, a);
      },

      read4: function(icon, byte, buffer) {
        // 4: 8bpp RRRGGGBB (256 colours)
        // r & g have the values 0x11, 0x33, 0x55, 0x77, 0x99, 0xbb, 0xdd, 0xff
        // b has the values            0x33,       0x77,       0xbb,       0xff
        var v = buffer[byte]
        var r = pixel[0] >> 5;
      	r = (r * 0x22) + 0x11;
      	var g = (buffer[0] >> 2) & 0x07;
      	g = (g * 0x22) + 0x11;
      	var b = buffer[0] & 0x03;
      	b = (b * 0x44) + 0x33;
        setColor(r, g, b, a);
      },

      // generates a list of all colors supported by the current palette
      getAvailableColors: function() {
        var mode = get('palette')
        result = []
        if (mode == 0) {
          result.push(0)
          result.push(0xffffff)
        } else if (mode == 1) {
          for (var i = 0; i <= 0xFF; i += 0x11) {
            result.push([i,i,i])
          }
        } else if (mode == 2) {
          for (var i = 0; i <= 0x55; i += 0x55) {
            for (var r = 0; r <= 0x55; r += 0x55) {
              for (var g = 0; g <= 0x55; g += 0x55) {
                for (var b = 0; b <= 0x55; b += 0x55) {
                  if (r & g & !b & !i) {
                    result.push([0xaa,0x55,0x00])
                  } else {
                    result.push([r+i, g+i, b+i])
                  }
                }
              }
            }
          }
        } else if (mode == 3) {
          for (var i = 0x00; i <= 0x22; i += 0x22) {
            for (var r = 0x11; r <= 0xdd; r += 0x44) {
              for (var g = 0x11; g <= 0xdd; g += 0x44) {
                for (var b = 0x11; b <= 0xdd; b += 0x44) {
                  result.push([r+i, g+i, b+i])
                }
              }
            }
          }
        } else if (mode == 4) {
          for (var r = 0x11; r <= 0xff; r += 0x22) {
            for (var g = 0x11; g <= 0xff; g += 0x22) {
              for (var b = 0x33; b <= 0xff; b += 0x44) {
                result.push([r, g, b])
              }
            }
          }
        }
        return result
      }
    });

    Ext.define('MyApp.controller.IconController', {
      extend: 'Ext.app.Controller',
      models: ['Icon'],
      stores: ['Icon','Frames'],

      // calculates the 3D distance between two colors
      distance: function(a, b) {
        Pr = .2126,
    		Pg = .7152
    		Pb = .0722

        Dr = a[0] - b[0]
        Dg = a[1] - b[1]
        Db = a[2] - b[2]

        return sqrt((Pr * Dr * Dr) + (Pg * Dg * Dg) + (Pb * Db * Db))
      },

      // finds the nearest color from a list of colors in a palette
      nearest: function(color, palette) {
        return palette.reduce(function(a, c) {
          return min(a, distance(c, color))
        })
      },

      bv: function(bit) {
        (1 << (bit))
      },
    })

    Ext.define('MyApp.view.ToolsController', {
      extend: 'Ext.app.ViewController',
      alias: 'controller.tools',

      onPaletteChange: function(c, v) {
        var c = this.lookupReference('palette');
        c.setActiveItem(v.data.value);
      },

      onColorChange: function(v,fs) {
        var p = this.lookupReference('canvas');
        p.value = v;
        p.fillStyle = fs;
      },

      onSizeChange: function() {
        var h = parseInt(this.lookupReference('height').getValue());
        var w = parseInt(this.lookupReference('width').getValue());

        var s = 512 / Math.max(h,w);

        var sprites = [];
        for (var x = 0; x < w; x++) {
          for (var y = 0; y < h; y++) {
            sprites.push({ type: 'rect', 'x': x*s, 'y': y*s, i: (y*w)+x, width: s, height:s, fillStyle: '#000', strokeStyle: '#ccc' })
          }
        }

        var c = this.lookupReference('canvas');
        c.getSurface().removeAll();
        c.getSurface().add(sprites);
        c.getSurface().renderFrame();
      }

    });

    Ext.application({
        name: 'icon editor',

        launch: function() {
          Ext.Viewport.setController('tools');
            Ext.Viewport.add([{
              xtype: 'toolbar',
              docked: 'top',
              title: 'Icon Editor',
              items: [{
                xtype: 'button',
                iconCls: 'x-fa fa-file'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-step-backward'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-play'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-step-forward'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-arrow-up'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-arrow-down'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-plus'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-minus'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-trash-o'
              },{
                xtype: 'button',
                iconCls: 'x-fa fa-hdd-o'
              }]
            },{
              xtype: 'panel',
              layout: 'hbox',
              padding: 0,
              items: [{
                padding: 0,
                border: true,
                xtype: 'panel',
                layout: 'vbox',
                width: 240,
                items: [{
                  xtype: 'formpanel',
                  items: [{
                    xtype: 'fieldset',
                    title: 'Image',
                    items: [{
                      xtype: 'textfield',
                      reference: 'width',
                      label: 'Width',
                      value: '16',
                      required: true,
                      listeners: {
                        change: 'onSizeChange'
                      }
                    },{
                      xtype: 'textfield',
                      reference: 'height',
                      label: 'Height',
                      value: '16',
                      required: true,
                      listeners: {
                        change: 'onSizeChange'
                      }
                    },{
                      xtype: 'selectfield',
                      reference: 'selectpalette',
                      required: true,
                      label: 'Palette',
                      value: 3,
                      options: [{
                        text: '1 bpp monochrome',
                        value: 0
                      },{
                        text: '4 bpp 16 grays',
                        value: 1
                      },{
                        text: '4 bpp 16 colours',
                        value: 2
                      },{
                        text: '8 bpp 128 colours',
                        value: 3
                      },{
                        text: '8 bpp 256 colours',
                        value: 4
                      },{
                        text: '12 bpp 4096 colours',
                        value: 5
                      }],
                      listeners: {
                        change: 'onPaletteChange'
                      }
                    }]
                  },{
                    xtype: 'fieldset',
                    title: 'Frame',
                    items: [{
                      xtype: 'sliderfield',
                      reference: 'delay',
                      label: 'Delay',
                      value: 0,
                      minValue: 0,
                      maxValue: 63
                    }]
                  },{
                    xtype: 'fieldset',
                    title: 'Pixel',
                    items: [{
                      xtype: 'textfield',
                      reference: 'hex',
                      label: 'Color',
                      value: 'f00',
                      required: true,
                      listeners: {
                        change: 'onColorChange'
                      }
                    },{
                      xtype: 'panel',
                      layout: 'card',
                      reference: 'palette',
                      label: 'Colour',
                      height: 200,
                      activeItem: 3,
                      items: [{
                        xtype: 'palette0',
                        listeners: {change: 'onColorChange'}
                      },{
                        xtype: 'palette1',
                        listeners: {change: 'onColorChange'}
                      },{
                        xtype: 'palette2',
                        listeners: {change: 'onColorChange'}
                      },{
                        xtype: 'palette3',
                        listeners: {change: 'onColorChange'}
                      },{
                        xtype: 'palette4',
                        listeners: {change: 'onColorChange'}
                      },{
                        xtype: 'palette5',
                        listeners: {change: 'onColorChange'}
                      }]
                    }]
                  }]
                }]
            },{
              xtype: 'panel',
              flex: 1,
              border: true,
              items: [{
                xtype: 'draw',
                plugins: ['spriteevents'],
                color: '#ccc',
                reference: 'canvas',
                centered: true,
                border: true,
                width: 512,
                height: 512,
                fillStyle: '#000',
                color: 0,
                listeners: {
                  spriteclick: function (item, event) {
                    var sprite = item && item.sprite;
                    if (sprite) {
                      sprite.setAttributes({fillStyle: this.fillStyle, value: this.value});
                      sprite.getSurface().renderFrame();
                    }
                  }
                }
              }]
            },{
              border: true,
              xtype: 'panel',
              layout: 'fit',
              width: 100,
              items: [{
                xtype: 'list',
                itemTpl: '{title}',
                data: [
                  { title: 'Item 1' },
                  { title: 'Item 2' },
                  { title: 'Item 3' },
                  { title: 'Item 4' }
                ]
              }]
            }
          ]
        }]);
      }
    });

    Ext.define('MyApp.window.New', {

    })

    // palette 0 = 1 bit A1 (color value must be supplied externally)
    Ext.define('MyApp.view.Palette0', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette0',
      plugins: ['spriteevents'],
      initialize: function() {
        var sprites = []
        var y = 0;
        // colors
        for (var i = 0; i < 2; i++) {
          var l = (15*i).toString(16)
          var fill = "#"+l+l+l
          sprites.push({ type: 'rect', x: i*96, y: 0, width: 96, height: 12, fillStyle: fill, strokeStyle: '#000', surface: 'gray' })
        }
        sprites.push({ type: 'rect', x: 1, y: y+1, width: 94, height: 10, fillStyle: 'none', strokeStyle: '#fff', kind: 'selection' })
        y+=12
        // current color
        sprites.push({ type: 'rect', x: 0, y: y, width: 192, height: 36, fillStyle: '#fff', strokeStyle: '#000', surface: 'current'})
        // chips
        y+=36
        for (var j = 0; j < 2; j++) {
          for (var i = 0; i < 8; i++) {
            sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: '#fff', strokeStyle: '#000', surface: 'chip' })
          }
          y+=24
        }
        this.callParent();
        this.setSprites(sprites);
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.fireEvent('change', sprite.value, sprite.fillStyle)
          }
        }
      }
    });

    // palette 1 = 4 bit L4 (4-bit framebuffer, 16 level of gray)
    Ext.define('MyApp.view.Palette1', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette1',
      plugins: ['spriteevents'],
      initialize: function() {
        var select = function(item, event) {
          
        }

        var sprites = []
        var y = 0
        // colors
        for (var i = 0; i < 16; i++) {
          var l = i.toString(16)
          var fill = "#"+l+l+l
          sprites.push({ type: 'rect', x: i*12, y: y, width: 12, height: 12, fillStyle: fill, strokeStyle: '#000', surface: 'grey' })
        }
        sprites.push({ type: 'rect', x: 1, y: y+1, width: 10, height: 10, fillStyle: 'none', strokeStyle: '#fff', kind: 'selection' })
        y+=12
        // current color
        sprites.push({ type: 'rect', x: 0, y: y, width: 192, height: 36, fillStyle: '#fff', strokeStyle: '#000', surface: 'current'})
        // chips
        y+=36
        for (var j = 0; j < 2; j++) {
          for (var i = 0; i < 8; i++) {
            sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: '#fff', strokeStyle: '#000', surface: 'chip' })
          }
          y+=24
        }
        this.callParent();
        this.setSprites(sprites);
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.fireEvent('change', sprite.value, sprite.fillStyle)
          }
        }
      }
    });

    // palette 2 = 4 bit R1 G1 B1 I1 (8-bit framebuffer RGBI, 16-color)
    // i.e. GCA
    Ext.define('MyApp.view.Palette2', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette2',
      plugins: ['spriteevents'],
      initialize: function() {
        var f = function(r,g,b,n) {
          if (r & g & !b & !n) {
            return "#a52"
          } else {
            r*=0x8
            g*=0x8
            b*=0x8
            n*=0x5
            return "#" + (r+n+2).toString(16) + (g+n+2).toString(16) + (b+n+2).toString(16)
          }
        }
        var sprites = []
        var n = 0
        var r = 1
        var g = 0
        var b = 0
        var y = 0
        // colors
        for (var i = 0; i < 2; i++) {
          sprites.push({ type: 'rect', x: i*96, y: y, width: 96, height: 12, fillStyle: f(r,g,b,i), strokeStyle: '#000', kind: 'intensity', value: i })
        }
        y+=12
        for (var i = 0; i < 2; i++) {
          sprites.push({ type: 'rect', x: i*96, y: y, width: 96, height: 12, fillStyle: f(i,g,b,n), strokeStyle: '#000', kind: 'red', value: i })
        }
        y+=12
        for (var i = 0; i < 2; i++) {
          sprites.push({ type: 'rect', x: i*96, y: y, width: 96, height: 12, fillStyle: f(r,i,b,n), strokeStyle: '#000', kind: 'green', value: i })
        }
        y+=12
        for (var i = 0; i < 2; i++) {
          sprites.push({ type: 'rect', x: i*96, y: y, width: 96, height: 12, fillStyle: f(r,g,i,n), strokeStyle: '#000', kind: 'blue', value: i })
        }
        y+=12
        // current color
        sprites.push({ type: 'rect', x: 0, y: y, width: 192, height: 36, fillStyle: '#fff', strokeStyle: '#000', kind: 'current'})
        // chips
        y+=36
        for (j = 0; j < 2; j++) {
          for (i = 0; i < 8; i++) {
            sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: '#fff', strokeStyle: '#000', kind: 'chip', value: j*8+i })
          }
          y+=24
        }
        sprites.push({ type: 'rect', x: 13, y: 1, width: 10, height: 10, fillStyle: 'none', strokeStyle: '#fff', kind: 'sel' })
        this.callParent();
        this.setSprites(sprites);
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.fireEvent('change', sprite.value, sprite.fillStyle)
          }
        }
      }
    });

    // palette 3 = 8 bit R2 G2 B2 I1 A1 (8-bit framebuffer)
    // i.e. SAM Coup√©
    Ext.define('MyApp.view.Palette3', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette3',
      plugins: ['spriteevents'],
      initialize: function() {
        var f = function(r,g,b,n) {
          r*=4
          g*=4
          b*=4
          n*=2
          return "#" + (r+n+1).toString(16) + (g+n+1).toString(16) + (b+n+1).toString(16)
        }
        var sprites = []
        var n = 1
        var r = 3
        var g = 0
        var b = 0
        var y = 0
        // colors
        for (var i = 0; i < 2; i++) {
          sprites.push({ type: 'rect', x: i*96, y: y, width: 96, height: 12, fillStyle: f(r,g,b,i), strokeStyle: '#000', kind: 'intensity', value: i })
        }
        y+=12
        for (var i = 0; i < 4; i++) {
          sprites.push({ type: 'rect', x: i*48, y: y, width: 48, height: 12, fillStyle: f(i,g,b,n), strokeStyle: '#000', kind: 'red', value: i })
        }
        y+=12
        for (var i = 0; i < 4; i++) {
          sprites.push({ type: 'rect', x: i*48, y: y, width: 48, height: 12, fillStyle: f(r,i,b,n), strokeStyle: '#000', kind: 'green', value: i })
        }
        y+=12
        for (var i = 0; i < 4; i++) {
          sprites.push({ type: 'rect', x: i*48, y: y, width: 48, height: 12, fillStyle: f(r,g,i,n), strokeStyle: '#000', kind: 'blue', value: i })
        }
        y+=12
        // current color
        sprites.push({ type: 'rect', x: 0, y: y, width: 192, height: 36, fillStyle: '#fff', strokeStyle: '#000', kind: 'current'})
        // chips
        y+=36
        for (j = 0; j < 2; j++) {
          for (i = 0; i < 8; i++) {
            sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: '#fff', strokeStyle: '#000', kind: 'chip', value: j*8+i })
          }
          y+=24
        }
        sprites.push({ type: 'rect', x: 13, y: 1, width: 10, height: 10, fillStyle: 'none', strokeStyle: '#fff', kind: 'sel' })
        this.callParent();
        this.setSprites(sprites);
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.fireEvent('change', sprite.value, sprite.fillStyle)
          }
        }
      }
    });

    // palette 4 = 8 bit 3:3:2
    Ext.define('MyApp.view.Palette4', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette4',
      plugins: ['spriteevents'],
      initialize: function() {
        var f = function(r,g,b) {
          r=r*2+1
          g=g*2+1
          b=b*4+3
          return "#" + r.toString(16) + g.toString(16) + b.toString(16)
        }
        var sprites = []
        var r = 7
        var g = 0
        var b = 0
        var y = 0
        // colors
        for (var i = 0; i < 8; i++) {
          sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 12, fillStyle: f(i,g,b), strokeStyle: '#000', kind: 'red', value: i })
        }
        y+=12
        for (var i = 0; i < 8; i++) {
          sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 12, fillStyle: f(r,i,b), strokeStyle: '#000', kind: 'green', value: i })
        }
        y+=12
        for (var i = 0; i < 4; i++) {
          sprites.push({ type: 'rect', x: i*48, y: y, width: 48, height: 12, fillStyle: f(r,g,i), strokeStyle: '#000', kind: 'blue', value: i })
        }
        y+=12
        // current color
        sprites.push({ type: 'rect', x: 0, y: y, width: 192, height: 36, fillStyle: '#fff', strokeStyle: '#000', kind: 'current'})
        // chips
        y+=36
        for (j = 0; j < 2; j++) {
          for (i = 0; i < 8; i++) {
            sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: '#fff', strokeStyle: '#000', kind: 'chip', value: j*8+i })
          }
          y+=24
        }
        sprites.push({ type: 'rect', x: 13, y: 1, width: 10, height: 10, fillStyle: 'none', strokeStyle: '#fff', kind: 'sel' })
        this.callParent();
        this.setSprites(sprites);
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.fireEvent('change', sprite.value, sprite.fillStyle)
          }
        }
      }
    });

    // palette 5 = 12 bit 4:4:4
    Ext.define('MyApp.view.Palette5', {
      extend: 'Ext.draw.Container',
      alias: 'widget.palette5',
      plugins: ['spriteevents'],
      initialize: function() {
        var f = function(r,g,b) {
          return "#" + r.toString(16) + g.toString(16) + b.toString(16)
        }
        var sprites = []
        var r = 15
        var g = 0
        var b = 0
        var y = 0
        // colors
        for (var i = 0; i < 16; i++) {
          sprites.push({ type: 'rect', x: i*12, y: y, width: 12, height: 12, fillStyle: f(i,g,b), strokeStyle: '#000', kind: 'red', value: i })
        }
        y+=12
        for (var i = 0; i < 16; i++) {
          sprites.push({ type: 'rect', x: i*12, y: y, width: 12, height: 12, fillStyle: f(r,i,b), strokeStyle: '#000', kind: 'green', value: i })
        }
        y+=12
        for (var i = 0; i < 16; i++) {
          sprites.push({ type: 'rect', x: i*12, y: y, width: 12, height: 12, fillStyle: f(r,g,i), strokeStyle: '#000', kind: 'blue', value: i })
        }
        y+=12
        // current color
        sprites.push({ type: 'rect', x: 0, y: y, width: 192, height: 36, fillStyle: '#fff', strokeStyle: '#000', kind: 'current'})
        // chips
        y+=36
        for (j = 0; j < 2; j++) {
          for (i = 0; i < 8; i++) {
            sprites.push({ type: 'rect', x: i*24, y: y, width: 24, height: 24, fillStyle: '#fff', strokeStyle: '#000', kind: 'chip', value: j*8+i })
          }
          y+=24
        }
        sprites.push({ type: 'rect', x: 13, y: 1, width: 10, height: 10, fillStyle: 'none', strokeStyle: '#fff', kind: 'sel' })
        this.callParent();
        this.setSprites(sprites);
      },
      listeners: {
        spriteclick: function (item, event) {
          var sprite = item && item.sprite;
          if (sprite) {
            this.fireEvent('change', sprite.value, sprite.fillStyle)
          }
        }
      }
    });

    </script>
</head>
<body>
</body>
</html>
